[{"fileName":"caveats.html","title":"Caveats","body":"<p>There are some limitations when using Harold. Hopefully, we solve most of them over time.</p> <h2>Nesting directories</h2> <p>Harold doesn't support nesting directories for Pages and Posts. It is something which we will introduce later. It would need some core rewrites, which is quite time-consuming, and the value of that isn't tremendous.</p> <p>For Pages, you should put .hbs files in the <code>pages</code> directory, and the output will be a .html file in the root of the output directory.</p> <p>For Posts, you should put .md files in the <code>posts</code> directory, and output will be a .html file in the <code>posts</code> directory in the output directory.</p> <p>You can change the names of directories using <code>.haroldrc</code> config. See the guides section on how to do this.</p> <h2>Support for multiple languages</h2> <p>There is no a simple possibility to have multiple language blogs. When nesting directories are available, I think it will be more straightforward. The quickest solution would be to host two separate instances in subfolders of the main website. Like for example <code>www.myhost.com/en</code>.</p> <h2>Scss, PostCSS and Handlebars customization</h2> <p>Harold doesn't provide any customization for Scss, PostCSS, and Handlebars. It will be possible to some extent in the future. For now, when it comes to PostCSS, we use only Autoprefixer, and you can define browser support in the package.json file (see how to do this in Autoprefixer docs).</p> <p>In most cases, the current configuration is good enough.</p> <h2>Posts list pagination</h2> <p>Harold doesn't support dynamic pagination for posts list at the moment. You can define <code>perPageLimit</code> and <code>currentPage</code> in the <code>postsList</code> helper, but you would have to prepare pagination manually. It is, of course, doable.</p> <p>It is something for further research for sure.</p> <h2>Markdown tags</h2> <p>Harold supports only the default set of Markdown tags. There are styles and HTML structures prepared in the default theme, like wide content for images and iframes. But you still have to write standard HTML there.</p> <p>In the future, there are plans to prepare a custom markdown parser plugin to be able to incorporate some custom Markdown structures.</p>","excerpt":"","publicationDate":"2021-05-01","tags":["learn"],"coverImage":""},{"fileName":"custom-templates.html","title":"Custom templates","body":"<p>From version 0.7.0, Harold allows passing the custom template when initializing a new project. The template should be archived and has the proper structure.</p> <p>There is a possibility to pass an archive from a remote server or local file system. For example:</p> <h2>Initialization examples:</h2> <pre><code class=\"language-bash\">npm init harold-app@latest my-app -t https://github.com/harold-js/harold-template-scaffold/archive/refs/heads/main.zip </code></pre> <p>with npm 7+</p> <pre><code class=\"language-bash\">npm init harold-app@latest my-app -- -t https://github.com/harold-js/harold-template-scaffold/archive/refs/heads/main.zip </code></pre> <p>Or it can also be a local file:</p> <pre><code class=\"language-bash\">npm init harold-app@latest my-app -t ./main.zip </code></pre> <p>with npm 7+</p> <pre><code class=\"language-bash\">npm init harold-app@latest my-app -- -t ./main.zip </code></pre> <h2>Custom template structure</h2> <p>As you can see, there is a separate very basic repository that includes a scaffold for every custom template. It is a clean starting point. Check it out <a href=\"https://github.com/harold-js/harold-template-scaffold\">here</a>.</p> <p>The structure of your template archive should look like this:</p> <pre><code class=\"language-bash\">// my-custom-template.zip file:  . my-custom-template-name-directory ├── assets ├── blog-layouts ├── pages ├── partials ├── posts ├── styles ├── .haroldrc (optional) </code></pre> <p>It is crucial to have the root directory in the archive. It is how it looks by default when you download the .zip file from the repository.</p> <p>All custom templates should start with a similar file and directories structure. You can also check examples of ready-to-use templates:</p> <ul>   <li><a href=\"https://github.com/harold-js/harold-template-default\">Default Template repository</a></li>   <li><a href=\"https://github.com/harold-js/harold-template-docs\">Docs Template repository</a></li> </ul> <h2>Harold config</h2> <p>You can add <code>.haroldrc</code> to your custom template. It will overwrite the one at the root of the project (if any). It is helpful because sometimes, the additional configuration for the whole project could be required in custom templates. For example, take a look at <a href=\"https://github.com/harold-js/harold-template-docs\">docs template</a>.</p> <h2>Initialize directly from the repo</h2> <p>There are three main services for git. GitHub, Bitbucket and Gitlab. Each has its paths and ways to download the .zip file or get the path to such a file. For example, for GitHub, you can download the zip file and copy its path depending on the branch. Example:</p> <pre><code class=\"language-bash\">https://github.com/harold-js/harold-template-scaffold/archive/refs/heads/main.zip </code></pre> <p>You can always download the zip file and initialize the Harold project using the local file path.</p> <p><a href=\"/docs/recipes.html\">Next: Recipes</a></p>","excerpt":"","publicationDate":"2021-04-29","tags":["docs"],"coverImage":""},{"fileName":"getting-started.html","title":"Getting Started","body":"<p>Harold is a static site generator that can help quickly set up websites, blogs, documentation sites, and other simple static websites.</p> <h2>Templates demo</h2> <p>Check out the demo of predefined templates, which you can use:</p> <ul>   <li><a href=\"https://haroldjs-default-demo.netlify.app/\">Default template</a></li>   <li><a href=\"https://haroldjs-docs-demo.netlify.app/\">Docs template</a></li>   <li><a href=\"https://haroldjs-bare-demo.netlify.app/\">Bare template</a></li> </ul> <h2>Walk-through video</h2> <p>Below you can watch a quick walk-through video:</p> <div class=\"embeded-media-container\">   <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/DG0T1Fg0mq0\" title=\"YouTube video player\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> <h2>Requirements</h2> <ul>   <li>the minimal version of Node is 16.0.0</li>   <li>basic knowledge of <a href=\"https://handlebarsjs.com/\">Handlebars</a> templating is required</li>   <li>basic knowledge of <a href=\"https://commonmark.org/help/\">Markdown</a> with Front Matter approach is required</li>   <li>basic knowledge of SCSS is helpful, but you can also write standard CSS using .scss files</li> </ul> <h2>Installation</h2> <p><strong>npx</strong></p> <pre><code class=\"language-bash\">npx create-harold-app@latest my-app </code></pre> <p><em>(npx is a package runner tool that comes with npm 5.2+ and higher, see instructions for older npm versions)</em></p> <p><strong>npm</strong></p> <pre><code class=\"language-bash\">npm init harold-app@latest my-app </code></pre> <p><em>(npm init is available in npm 6+)</em></p> <p><strong>yarn</strong></p> <pre><code class=\"language-bash\">yarn create harold-app@latest my-app </code></pre> <p><em>(yarn create is available in Yarn 0.25+)</em></p> <p>   It will create a directory called my-app inside the current folder.   Inside that directory, it will generate the initial project structure and install the transitive dependencies. </p> <p>As an option, you can choose with which template it should init the project. Possible choices:</p> <ul>   <li>default</li>   <li>docs</li>   <li>bare</li> </ul> <p>If you want to init the project with <code>docs</code> template, pass additional option <code>-t docs</code>. For example: <code>npm init harold-app@latest my-app -t docs</code> or with npm 7+ <code>npm init harold-app@latest my-app -- -t docs</code>. The same for <code>bare</code> template.</p> <p>In the future, there will be a possibility to pass custom templates.</p> <p>Write <code>create-harold-app@latest --help</code> in a terminal to get the list of options.</p> <h2>Start</h2> <p>From the newly created app's directory (in our case, my-app), run <code>npm start</code>. It will serve the app under <code>localhost:3000</code>. To change the port, just add <code>PORT</code> env, like: <code>PORT=3002 npm start</code>.</p> <h2>Configuration</h2> <p>Harold will search up the directory tree for configuration in the following places:</p> <ul>   <li>a <code>harold</code> property in package.json</li>   <li>a <code>.haroldrc</code> file in JSON or YAML format</li>   <li>a <code>.haroldrc.json</code>, <code>.haroldrc.yaml</code>, <code>.haroldrc.yml</code>, <code>.haroldrc.js</code>, or <code>.haroldrc.cjs</code> file</li>   <li>a <code>harold.config.js</code> or <code>harold.config.cjs</code> CommonJS module exporting an object</li> </ul> <p>For now, there isn't much to configure, but you can configure the directory for md files (by default <code>posts</code>) and the directory for md files layouts (by default <code>blog-layouts</code>). Quite helpful because these names are also used in urls. For example, by default, <code>/posts/name-of-the-post</code> (name of the .md file), but you might want to build the docs website and have <code>/docs/name-of-the-doc</code> (name of the .md file).</p> <p>You can also configure the name for output directory using <code>outputDirName</code> and if you want to host your site in subdirectory you would also need to add <code>hostDirName</code>.</p> <p>Example of <code>.haroldrc</code> (placed in the root of your harold app):</p> <pre><code>{   mdFilesDirName: 'docs',   mdFilesLayoutsDirName: 'docs-layouts',   outputDirName: 'dist',   hostDirName: 'subfolder-name' } </code></pre> <p>   Remember to change these directories' names after you init your app.   If you are using the search system, change <code>postsPath</code> in <code>harold-search.js</code>. </p> <h2>harold-scripts</h2> <p><a href=\"https://github.com/harold-js/harold-scripts\">harold-scripts</a> is the fundamental toolset that will run the dev server and build a static site. It comes as a dependency from a separate package.</p> <p>You don't have to think about it much. Create Harold App will install it when initializing the project. The package.json file of the newly created project will already have a configuration for a <code>start</code> and <code>build</code> scripts using harold-scripts.</p> <p><strong>Updating your project:</strong></p> <ol>   <li>You need to update <code>harold-scripts</code></li>   <li>Check if there are any breaking changes in the <a href=\"https://github.com/harold-js/create-harold-app/blob/master/CHANGELOG.md\">CHANGELOG.md</a></li>   <li>In your project, update the version of <code>harold-scripts</code> package</li> </ol> <p><a href=\"/docs/guides.html\">Next: Guides</a></p>","excerpt":"","publicationDate":"2021-05-01","tags":["docs"],"coverImage":""},{"fileName":"guides.html","title":"Guides","body":"<p>Harold is a static site and blog generator based on Handlebars and Markdown. Let's see how it is built. Be sure to check <a href=\"/docs/getting-started.html\">Getting started</a> section first.</p> <h2>Workflow</h2> <p>With Harold, the workflow looks like this:</p> <ol>   <li>You work in the <code>src</code> directory, and Harold transforms everything into standard .css and .html files in the <code>build</code> directory.</li>   <li>You can prepare <code>partials</code>, <code>pages</code>, <code>posts/docs</code> and <code>assets</code> files.</li>   <li>You work with Handlebars and Markdown. So a little bit of knowledge of these two is required.</li>   <li>You work with a development server that runs at <code>localhost:3000</code>.</li>   <li>You will get all changes reflected in the browser after refreshing it.</li> </ol> <h2>Directories structure</h2> <p>Below is the <code>src</code> directory structure from the Default template:</p> <pre><code class=\"language-bash\">. ├── assets │   ├── images │   │   └── favicon.png │   └── js │       ├── harold.js │       ├── harold-main-menu.js │       ├── harold-scroll-top.js │       └── harold-search.js ├── blog-layouts │   └── blog-post.hbs ├── jsonData │   └── posts.json ├── pages │   ├── about.hbs │   ├── all-posts-list.hbs │   ├── author.hbs │   ├── index.hbs │   └── projects.hbs ├── partials │   ├── footer.hbs │   ├── go-top-btn.hbs │   ├── head.hbs │   ├── main-menu-overlay.hbs │   └── search-overlay.hbs ├── posts │   ├── example1.md │   ├── example2.md │   ├── example3.md │   ├── example4.md │   ├── example5.md │   ├── example6.md │   └── harold-intro.md └── statics (optional) └── styles     ├── _basic.scss     ├── _homepage.scss     ├── _main-menu.scss     ├── main.scss     ├── _page.scss     ├── _post.scss     ├── _search.scss     ├── _utils.scss     └── _variables.scss </code></pre> <p><code>styles</code> and <code>assets</code> directories are self-explanatory. Here you can build your Scss structures and custom javascript logic. You can also save images here. All will be moved and compiled later.</p> <p><code>posts</code> and <code>pages</code> are places for actual content. You write pages with Handlebars markup and posts with Markdown.</p> <p><code>blog-layouts</code> is a place for all custom blog layouts. You can then point particular layout to use in the Markdown file.</p> <p><code>statics</code> is a place for all custom static files that you would want to copy to the 'build' directory, such as robots.txt, manifest.json, etc. They will land in the root. If you wish, you can also nest directories there.</p> <p>All compiles and lands in the <code>build</code> directory:</p> <pre><code class=\"language-bash\">. ├── about.html ├── all-posts-list.html ├── assets │   ├── images │   │   └── favicon.png │   └── js │       ├── harold.js │       ├── harold-main-menu.js │       ├── harold-scroll-top.js │       └── harold-search.js ├── author.html ├── index.html ├── jsonData │   └── posts.json ├── posts │   ├── example1.html │   ├── example2.html │   ├── example3.html │   ├── example4.html │   ├── example5.html │   ├── example6.html │   └── harold-intro.html ├── projects.html └── styles     └── main.css </code></pre> <p>As you can see here, static website, ready to deploy.</p> <h2>Pages and partials</h2> <p>You will build pages using Handlebars templating engine. So everything possible with Handlebars should be possible also here. You can define your contents and split them into partials. Partial is a fragment of your HTML-like document.</p> <pre><code class=\"language-handlebars\">&#x3C;div class=\"container-full-width docs-layout\" data-js-doc-content>   {{> docs-sidebar-left}}   &#x3C;section class=\"docs-content docs-home\">     &#x3C;h1>A quick intro to Harold JS&#x3C;/h1> </code></pre> <p><code>{{> docs-sidebar-left}}</code> here is nothing more than a separate <code>.hbs</code> file located in the <code>partials</code> directory. It will be injected precisely in this place in the code.</p> <p>You can also use partials with parameters. For example we can use <code>head</code> partial (also located in <code>partials</code> directory) which looks like:</p> <pre><code class=\"language-handlebars\">{{> head   title=\"Harold - Static site generator\"   description=\"Blogs, landing pages, portfolios, documentation sites - start with ready-to-use templates\"   ogTitle=\"Harold - Static site generator\"   ogDescription=\"Blogs, landing pages, portfolios, documentation sites - start with ready-to-use templates\"   ogUrl=\"https://www.haroldjs.com\"   twitterTitle=\"Harold - Static site generator\"   twitterDescription=\"Blogs, landing pages, portfolios, documentation sites - start with ready-to-use templates\"   twitterUrl=\"https://www.haroldjs.com\" }} </code></pre> <p>Handlebars engine will then inject all of these parameters into partial's placeholders. Head partial looks like:</p> <pre><code class=\"language-handlebars\">&#x3C;!DOCTYPE html> &#x3C;html lang=\"en\">  &#x3C;head>   &#x3C;meta charset=\"UTF-8\">   &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">   &#x3C;link rel=\"icon\" href=\"/assets/images/favicon.png\" type=\"image/png\" />   &#x3C;title>{{title}}&#x3C;/title>   &#x3C;meta name=\"description\" content=\"{{description}}\">        &#x3C;meta property=\"og:title\" content=\"{{ogTitle}}\" />   &#x3C;meta property=\"og:description\" content=\"{{ogDescription}}\" />   &#x3C;meta property=\"og:image\" content=\"{{ogImage}}\" />   &#x3C;meta property=\"og:url\" content=\"{{ogUrl}}\" />    &#x3C;meta name=\"twitter:title\" content={{twitterTitle}} />   &#x3C;meta name=\"twitter:description\" content=\"{{twitterDescription}}\" />   &#x3C;meta name=\"twitter:url\" content=\"{{twitterUrl}}\" />   &#x3C;meta name=\"twitter:image\" content=\"{{twitterImage}}\" /> </code></pre> <p>In the end, everything is compiled to standard .html starting from the page file as a root file for html output.</p> <p>Read more in the Handlebars docs: <a href=\"https://handlebarsjs.com/guide/\">https://handlebarsjs.com/guide/</a></p> <h2>Markdown files</h2> <p>Every single Markdown file is compiled into a separate .html file located in the <code>posts</code> directory (or different one if there is custom config file). Every file defines a couple of parameters at the top of the file. It uses the Front Matter approach (Embedded YAML structured data at the top of Markdown documents).</p> <pre><code class=\"language-markdown\">--- layout: 'docs' title: 'Recipes' publicationDate: '2021-05-01' tags:   - learn ogTitle: \"Harold Recipes - Static site generator\" ogDescription: \"Ready-to-use recipes. You can take them as inspiration or copy it as it is and use in your custom template\" ogImage: \"https://www.haroldjs.com/assets/images/harold-start.png\" ogUrl: \"https://www.haroldjs.com/docs/recipes\" twitterTitle: \"Harold Recipes - Static site generator\" twitterDescription: \"Ready-to-use recipes. You can take them as inspiration or copy it as it is and use in your custom template\" twitterImage: \"https://www.haroldjs.com/assets/images/harold-start.png\" twitterUrl: \"https://www.haroldjs.com/docs/recipes\"  ---  Rest of the markdown content here... </code></pre> <p>You can add as many parameters there as you can, but Harold requires mandatory ones in every .md file. They are:</p> <ul>   <li><code>layout</code> - defines which blog layout to use</li>   <li><code>title</code> - defines post title</li>   <li><code>publicationDate</code> - defines publication date in format YYYY-MM-DD</li> </ul> <p>In markdown files, you can also use standard HTML code. Of course, most of it. Some special scripting tags are removed when compiling.</p> <p>In the Default template, there are predefined styles and structures to be used. For example, wide media elements:</p> <pre><code class=\"language-html\">&#x3C;div class=\"wide-content\">&#x3C;img src=\"/assets/img.png\" alt=\"alt text\" />&#x3C;/div> </code></pre> <p>So to use it, you can paste your image into div with the <code>wide-content</code> class.</p> <p>Another predefined structure will be helpful when you need to embed some iframe-based content.</p> <pre><code class=\"language-html\">&#x3C;div class=\"embeded-media-container\">   &#x3C;iframe src=\"https://codesandbox.io/embed/proper-usage-of-react-tracked-o8v3s?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\"      style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"      title=\"proper usage of react-tracked\"      allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"    >&#x3C;/iframe> &#x3C;/div> </code></pre> <p>It will be also responsive.</p> <h2>Helpers</h2> <p>Helpers are unique fragments of Handlebars code that maps javascript functions under the hood. So you can use loops, conditions, blocks, etc. The list of all built-in helpers is here: <a href=\"https://handlebarsjs.com/guide/\">https://handlebarsjs.com/guide/</a>.</p> <p>Besides that Harold offers it's own custom helpers which are:</p> <p><strong>formatDate</strong></p> <p>It is a handy helper when you need to change date formatting across the whole app.</p> <pre><code class=\"language-handlebars\">{{formatDate date=publicationDate format='dd mmmm yyyy'}} </code></pre> <p>In the example above, we take <code>publicationDate</code>, and we format it using <code>dd mmmm yyyy</code>. Check format options here: <a href=\"https://blog.stevenlevithan.com/archives/date-time-format\">https://blog.stevenlevithan.com/archives/date-time-format</a>.</p> <p>It can be used in every .hbs file.</p> <p><strong>postsList</strong></p> <p>This helper is very powerful when it comes to building post lists. It has a very good parametrization.</p> <pre><code class=\"language-handlebars\">{{postsList   perPageLimit=6   currentPage=1   className=\"homepage-featured-post\"   noTags=true   noExcerpt=true   noDate=true   byTagName=\"featured\"   noReadMoreButton = false,   readMoreButtonLabel=\"Lets dive in!\"   noImage = false,   dateFormat = 'yyyy-mm-dd', }} </code></pre> <ul>   <li><code>perPageLimit</code> - you can define how many posts (.md) files the helper should list in this place (Default: undefined -> all items)</li>   <li><code>currentPage</code> - you can list first, second or other pages here (Default: 1)</li>   <li><code>className</code> - useful when you want to define a custom CSS class for the container. All children will get an additional prefix, so here, for example, the title element will get the 'homepage-featured-post--title' class (Default: hrld-post-list)</li>   <li><code>noTags</code> - hide tags list (Default: false)</li>   <li><code>noExcerpt</code> - hide excerpt text (Default: false)</li>   <li><code>noDate</code> - hide publication date (Default: false)</li>   <li><code>byTagName</code> - filter and create list by specified tag name (Default: undefined -> all tags)</li>   <li><code>noReadMoreButton</code> - hide read more button (Default: false)</li>   <li><code>readMoreButtonLabel</code> - define read more button label (Default: 'Read more')</li>   <li><code>noImage</code> - hide preview image (Default: false)</li>   <li><code>dateFormat</code> - define publication date format (Default: 'yyyy-mm-dd')</li> </ul> <p><strong>relativePath</strong></p> <pre><code class=\"language-handlebars\">{{relativePath 'about.html'}} {{relativePath 'assets/images/image.png'}} {{relativePath 'styles/style.css'}} </code></pre> <p>I would recommend always using this helper in .hbs files. Of course, if you are well aware of your paths, you can omit that. In Scss and Markdown files, you still need to use standard paths, if needed, relative ones. It will probably change in the future.</p> <p><strong>hostDirName</strong></p> <pre><code class=\"language-handlebars\">{{hostDirName}} </code></pre> <p>It will return the previously defined subdirectory name in which the whole website is hosted. It is sometimes useful when you would like to get this name in your templates dynamically. In the default template, it is used to provide proper paths for the template's JavaScript logic. You probably won't need to use it much unless you write your own Harold template for many different projects.</p> <p>There isn't a possibility to add custom Handlebars helpers, but it is in plans in the future.</p> <h2>SCSS files</h2> <p>Harold uses Scss for styling. All when what can be done with Scss should also be possible here.</p> <p>You can create many different structures. The Default template uses Scss imports to differentiate sections and tooling classes. For example, you'll find there <code>_utils.scss</code> file with predefined content formatting classes and whole sections like <code>_main-menu.scss</code>. All is then imported in the <code>main.scss</code> file.</p> <pre><code class=\"language-scss\">@import 'variables'; @import 'utils'; @import 'basic'; @import 'search'; @import 'main-menu'; @import 'docs'; @import 'homepage'; </code></pre> <p>As you can see, all files which we want to import should have the <code>_</code> prefix. This tells the compiler that it shouldn't create separate .css files from these.</p> <p>Harold also uses <a href=\"https://postcss.org/\">PostCSS</a> and <a href=\"https://www.npmjs.com/package/autoprefixer\">Autoprefixer</a> out of the box. For now there is no way to use custom plugins, but it is planned.</p> <h2>Assets</h2> <p>All images, fonts, and custom JavaScript files should land in the <code>assets</code> directory. Harold will move them to the <code>build</code> directory.</p> <p>Always refer to these files using absolute paths.</p> <pre><code class=\"language-html\">&#x3C;script src=\"/assets/js/harold.js\">&#x3C;/script> </code></pre> <pre><code class=\"language-html\">&#x3C;img src=\"/assets/images/img.png\" /> </code></pre> <p>See example of assets directory <a href=\"https://github.com/harold-js/harold-template-default/tree/main/assets\">here</a>.</p> <h2>Posts JSON data</h2> <p>There is a special <code>posts.json</code> file located in the <code>jsonData</code> directory. It will be populated on every markdown file change, keeps data about all posts in JSON format. This file is quite essential because the whole search engine uses it. It is its primary purpose in the Default theme, but you can use it for many other use cases. For example, for loading some posts dynamically or creating <code>load more</code> functionality. It could have many different use cases.</p> <h2>Host from a subdirectory</h2> <p>Suppose you need to host your blog created using Harold from subdirectory. For example, <code>www.mywebsite.com/blog/</code> then you would need to configure <code>hostDirName</code> in the <code>.haroldrc</code> file. Add there the name of your subfolder. The second thing is that you need to be aware of your paths (posts links, images, styles, etc.). The default Harold's templates support relative paths by default. It uses the <code>relativePath</code> handlebars helper for that. So it should work well in both cases when hosted from root and subdirectory.</p> <p><a href=\"/docs/custom-templates.html\">Next: Custom templates</a></p>","excerpt":"","publicationDate":"2021-05-01","tags":["docs"],"coverImage":""},{"fileName":"recipes.html","title":"Recipes","body":"<p>Below are ready-to-use recipes. You can take them as inspiration or copy it as it is and use in your custom template.</p> <h2>Featured post</h2> <p>You can use <code>postsList</code> Handlebars helper with <code>perPageLimit</code> param set to 1. Then you can provide your wrapper <code>className</code> and style it as you need.</p> <pre><code class=\"language-handlebars\">{{postsList   perPageLimit=1   currentPage=1   className=\"homepage-featured-post\"   dateFormat=\"dd mmmm yyyy\"   noTags=true   noExcerpt=true   noDate=true   byTagName=\"featured\"   readMoreButtonLabel=\"Lets dive in!\" }} </code></pre> <h2>Posts categories</h2> <p>You can use <code>postsList</code> Handlebars helper with <code>perPageLimit</code> param. You can use tags as categories. Posts will be divided into sections and listed by tag name.</p> <pre><code class=\"language-handlebars\">&#x3C;div class=\"homepage-section homepage-section-bg\">   &#x3C;div class=\"container\">     &#x3C;h1 class=\"homepage-header\">Coding&#x3C;/h1>     {{postsList     perPageLimit=3     currentPage=1     className=\"post-list-items\"     dateFormat=\"dd mmmm yyyy\"     byTagName=\"coding\"     readMoreButtonLabel=\"&#x26;#8674;\"     }}   &#x3C;/div> &#x3C;/div>  &#x3C;div class=\"homepage-section\">   &#x3C;div class=\"container\">     &#x3C;h1 class=\"homepage-header\">Art and Design&#x3C;/h1>     {{postsList     perPageLimit=3     currentPage=1     className=\"post-list-items\"     dateFormat=\"dd mmmm yyyy\"     byTagName=\"art\"     readMoreButtonLabel=\"&#x26;#8674;\"     }}   &#x3C;/div> &#x3C;/div> </code></pre> <p>More examples on <a href=\"https://github.com/harold-js/harold-template-default\">GitHub</a></p> <h2>Simple posts list</h2> <p>You can use the <code>postsList</code> Handlebars helper with disabled most of its contents to achieve a simple posts list that can generate menus.</p> <pre><code class=\"language-handlebars\">{{postsList   className=\"docs-articles-list\"   noTags=true   noExcerpt=true   noDate=true   noReadMoreButton=true   byTagName='docs' }} </code></pre> <p>This documentation uses this approach to generate left sidebar menus.</p> <h2>Similar posts</h2> <p>You can use the <code>postsList</code> with <code>byTagName</code>, which you should set up the same as the current post tag or tags. This way, you will be able to display a similar posts list. Remember to do this in the layout hbs file, not in Markdown files.</p> <pre><code class=\"language-handlebars\">{{postsList   className=\"docs-articles-list\"   byTagName=tags.[0] }} </code></pre> <h2>Set OG tags</h2> <p>You can do this for pages and also in Markdown files for blog/docs posts.</p> <pre><code class=\"language-handlebars\">{{> head   title=\"Homepage\"   description=\"Harold app default theme\"   ogTitle=\"Harold Homepage\"   ogDescription=\"Harold Description\"   ogImage=\"\"   twitterTitle=\"Harold Homepage\"   twitterDescription=\"Harold Description\"   twitterImage=\"\" }} </code></pre> <pre><code class=\"language-bash\">--- layout: 'blog-post' title: 'Harold is alive!' excerpt: \"Excerpt of the featured example post.\" coverImage: 'https://picsum.photos/id/82/1500/600' tags:   - tag7   - featured publicationDate: '2021-04-18' ogTitle: 'Harold is alive!' ogDescription: 'Harold is a static site generator based on Handlebars templating system and markdown' ogUrl: 'https://my-website.com/blog/doc1' ogImage: 'https://my-website.com/assets/images/ogImage.png' twitterTitle: 'Harold is alive!' twitterDescription: 'Harold is a static site generator based on Handlebars templating system and markdown' twitterUrl: 'https://my-website.com/blog/doc1' twitterImage: 'https://my-website.com/assets/images/ogImage.png' --- </code></pre> <p>More examples on <a href=\"https://github.com/harold-js/harold-template-default\">GitHub</a></p> <h2>Posts JSON data</h2> <p>By default, you have access to JSON data with all posts. It is useful when you want to do something dynamic using JavaScript. For example, 'load more' functionality or search. The search system is implemented already in the default template. Here is an example:</p> <pre><code class=\"language-javascript\">const postsJsonDataPath = '/jsonData/posts.json';  const fetchPostsJsonData = () => {   return fetch(postsJsonDataPath)     .then((response) => response.json())     .then((data) => {       postsJSON = data;       return data;     }); };  fetchPostsJsonData().then((data) => {   searchIndex = lunr(function () {     this.ref('fileName');     this.field('title');     this.field('body');     this.field('excerpt');     this.field('tags');     data.forEach((doc) => {       this.add(         Object.assign(doc, {           tags: doc.tags.join(' '),           body: doc.body.replace(/(&#x3C;([^>]+)>)/gi, ''),         })       );     }, this);   }); }); </code></pre> <p>More examples on <a href=\"https://github.com/harold-js/harold-template-default/tree/main/assets\">GitHub</a></p> <h2>Custom directories names</h2> <p>Sometimes you don't want to build a blog, but let's say, documentation. There is a <code>posts</code> directory for Markdown files and a <code>blog-layouts</code> directory for layouts by default. Because URLs are using <code>posts</code> directory name, you will end with <code>/posts/my-documentation-article-1</code>, which isn't optimal. You can change it by using the <code>.haroldrc</code> configuration file. Example:</p> <pre><code class=\"language-bash\">{   mdFilesDirName: 'docs',   mdFilesLayoutsDirName: 'docs-layouts' }  </code></pre> <h2>Adding robots.txt, manifest.json, etc.</h2> <p>In many cases, there is a need to add some custom files to the root of your website. You can do this using the optional <code>src/statics</code> directory. Example: <code>src/statics/robots.txt</code> will be placed in <code>build/robots.txt</code> next to your index.html file. You can also nest your directories like <code>src/statics/some-dir/some-dir/file.txt</code>. It will land in <code>build/some-dir/some-dir/file.txt</code>.</p> <h2>Github Pages hosting</h2> <p>If you want to host Harold's website under your main username (username.github.io), you would need to rename your output directory to supported by Github. It is the <code>docs</code> directory. You would need to create a <code>.haroldrc</code> file and put the output directory name there.</p> <pre><code class=\"language-bash\">{   outputDirName: 'docs', } </code></pre> <p>Build your Harold app and push it to the repo. Remember to add the <code>.gitignore</code> file, and exclude <code>node_modules</code> but keep the output directory (<code>docs</code>).</p> <p>Configure your Github Pages to take the source from the <code>docs</code> directory.</p> <p>Here is the quick walk-through demo on how to do that:</p> <div class=\"embeded-media-container\">   <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VjCWn3qeZnY\" title=\"YouTube video player\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> <p>If you want to host Harold's website under the repository subdirectory name (username.github.io/my-blog), you need to add <code>hostDirName</code> and remember to keep your paths in order. You can use the <code>relativePath</code> handlebars helper. The default template (from v0.4.0) is already using it, so it should work as-is.</p> <pre><code class=\"language-bash\">{   outputDirName: 'docs',   hostDirName: 'my-blog' } </code></pre> <p>Check out demo: <a href=\"https://github.com/juliancwirko/testing-github-pages\">github.com/juliancwirko/testing-github-pages</a></p> <h2>Netlify hosting</h2> <p>With Netlify, it is a little bit simpler. You just need to point to the Git branch and directory you want to deploy your site. You don't even need the source in the repo because Netlify will run the build scripts for you.</p> <p>Here is the quick walk-through demo on how to do that:</p> <div class=\"embeded-media-container\">   <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZjeYgAgiHRE\" title=\"YouTube video player\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe> </div> <h2>Other ideas?</h2> <p>I would be thrilled if you could share your ideas. Let me know.</p> <p>Please read <a href=\"/docs/guides.html\">Guides</a> section if you need more detailed docs.</p> <p><a href=\"/docs/caveats.html\">Next: Caveats</a></p>","excerpt":"","publicationDate":"2021-05-02","tags":["learn"],"coverImage":""}]